!function(g,I){"object"==typeof exports&&"object"==typeof module?module.exports=I():"function"==typeof define&&define.amd?define([],I):"object"==typeof exports?exports.openmct=I():g.openmct=I()}(this,(function(){return(()=>{var __webpack_modules__={8897:()=>{eval("/*****************************************************************************\n * Open MCT, Copyright (c) 2014-2022, United States Government\n * as represented by the Administrator of the National Aeronautics and Space\n * Administration. All rights reserved.\n *\n * Open MCT is licensed under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * http://www.apache.org/licenses/LICENSE-2.0.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n *\n * Open MCT includes source code licensed under additional open source\n * licenses. See the Open Source Licenses file (LICENSES.md) included with\n * this source code distribution or the Licensing information page available\n * at runtime from the About dialog for additional information.\n *****************************************************************************/\n\n/**\n * Module defining InMemorySearchWorker. Created by deeptailor on 10/03/2019.\n */\n(function () {\n    // An object composed of domain object IDs and models\n    // {id: domainObject's ID, name: domainObject's name}\n    const indexedDomainObjects = {};\n    const indexedAnnotationsByDomainObject = {};\n    const indexedAnnotationsByTag = {};\n\n    self.onconnect = function (e) {\n        const port = e.ports[0];\n\n        port.onmessage = function (event) {\n            const requestType = event.data.request;\n            if (requestType === 'index') {\n                indexItem(event.data.keyString, event.data.model);\n            } else if (requestType === 'OBJECTS') {\n                port.postMessage(searchForObjects(event.data));\n            } else if (requestType === 'ANNOTATIONS') {\n                port.postMessage(searchForAnnotations(event.data));\n            } else if (requestType === 'TAGS') {\n                port.postMessage(searchForTags(event.data));\n            } else if (requestType === 'NOTEBOOK_ANNOTATIONS') {\n                port.postMessage(searchForNotebookAnnotations(event.data));\n            } else {\n                throw new Error(`Unknown request ${event.data.request}`);\n            }\n        };\n\n        port.start();\n\n    };\n\n    self.onerror = function (error) {\n        //do nothing\n        console.error('Error on feed', error);\n    };\n\n    function indexAnnotation(objectToIndex, model) {\n        Object.keys(model.targets).forEach(targetID => {\n            if (!indexedAnnotationsByDomainObject[targetID]) {\n                indexedAnnotationsByDomainObject[targetID] = [];\n            }\n\n            objectToIndex.targets = model.targets;\n            objectToIndex.tags = model.tags;\n            const existsInIndex = indexedAnnotationsByDomainObject[targetID].some(indexedObject => {\n                return indexedObject.keyString === objectToIndex.keyString;\n            });\n\n            if (!existsInIndex) {\n                indexedAnnotationsByDomainObject[targetID].push(objectToIndex);\n            }\n        });\n    }\n\n    function indexTags(keyString, objectToIndex, model) {\n        // add new tags\n        model.tags.forEach(tagID => {\n            if (!indexedAnnotationsByTag[tagID]) {\n                indexedAnnotationsByTag[tagID] = [];\n            }\n\n            const existsInIndex = indexedAnnotationsByTag[tagID].some(indexedObject => {\n                return indexedObject.keyString === objectToIndex.keyString;\n            });\n\n            if (!existsInIndex) {\n                indexedAnnotationsByTag[tagID].push(objectToIndex);\n            }\n\n        });\n        // remove old tags\n        const tagsToRemoveFromIndex = Object.keys(indexedAnnotationsByTag).filter(indexedTag => {\n            return !(model.tags.includes(indexedTag));\n        });\n        tagsToRemoveFromIndex.forEach(tagToRemoveFromIndex => {\n            indexedAnnotationsByTag[tagToRemoveFromIndex] = indexedAnnotationsByTag[tagToRemoveFromIndex].filter(indexedAnnotation => {\n                const shouldKeep = indexedAnnotation.keyString !== keyString;\n\n                return shouldKeep;\n            });\n        });\n    }\n\n    function indexItem(keyString, model) {\n        const objectToIndex = {\n            type: model.type,\n            name: model.name,\n            keyString\n        };\n        if (model && (model.type === 'annotation')) {\n            if (model.targets) {\n                indexAnnotation(objectToIndex, model);\n            }\n\n            if (model.tags) {\n                indexTags(keyString, objectToIndex, model);\n            }\n        } else {\n            indexedDomainObjects[keyString] = objectToIndex;\n        }\n    }\n\n    /**\n     * Gets search results from the indexedItems based on provided search\n     *   input. Returns matching results from indexedItems\n     *\n     * @param data An object which contains:\n     *           * input: The original string which we are searching with\n     *           * maxResults: The maximum number of search results desired\n     *           * queryId: an id identifying this query, will be returned.\n     */\n    function searchForObjects(data) {\n        let results = [];\n        const input = data.input.trim().toLowerCase();\n        const message = {\n            request: 'searchForObjects',\n            results: [],\n            total: 0,\n            queryId: data.queryId\n        };\n\n        results = Object.values(indexedDomainObjects).filter((indexedItem) => {\n            return indexedItem.name.toLowerCase().includes(input);\n        }) || [];\n\n        message.total = results.length;\n        message.results = results\n            .slice(0, data.maxResults);\n\n        return message;\n    }\n\n    function searchForAnnotations(data) {\n        let results = [];\n        const message = {\n            request: 'searchForAnnotations',\n            results: [],\n            total: 0,\n            queryId: data.queryId\n        };\n\n        results = indexedAnnotationsByDomainObject[data.input] || [];\n\n        message.total = results.length;\n        message.results = results\n            .slice(0, data.maxResults);\n\n        return message;\n    }\n\n    function searchForTags(data) {\n        let results = [];\n        const message = {\n            request: 'searchForTags',\n            results: [],\n            total: 0,\n            queryId: data.queryId\n        };\n\n        if (data.input) {\n            data.input.forEach(matchingTag => {\n                const matchingAnnotations = indexedAnnotationsByTag[matchingTag];\n                if (matchingAnnotations) {\n                    matchingAnnotations.forEach(matchingAnnotation => {\n                        const existsInResults = results.some(indexedObject => {\n                            return matchingAnnotation.keyString === indexedObject.keyString;\n                        });\n                        if (!existsInResults) {\n                            results.push(matchingAnnotation);\n                        }\n                    });\n                }\n            });\n        }\n\n        message.total = results.length;\n        message.results = results\n            .slice(0, data.maxResults);\n\n        return message;\n    }\n\n    function searchForNotebookAnnotations(data) {\n        let results = [];\n        const message = {\n            request: 'searchForNotebookAnnotations',\n            results: {},\n            total: 0,\n            queryId: data.queryId\n        };\n\n        const matchingAnnotations = indexedAnnotationsByDomainObject[data.input.targetKeyString];\n        if (matchingAnnotations) {\n            results = matchingAnnotations.filter(matchingAnnotation => {\n                if (!matchingAnnotation.targets) {\n                    return false;\n                }\n\n                const target = matchingAnnotation.targets[data.input.targetKeyString];\n\n                return (target && target.entryId && (target.entryId === data.input.entryId));\n            });\n        }\n\n        message.total = results.length;\n        message.results = results\n            .slice(0, data.maxResults);\n\n        return message;\n    }\n}());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8897\n")}},__webpack_exports__={};return __webpack_modules__[8897](),__webpack_exports__})()}));