!function(g,I){"object"==typeof exports&&"object"==typeof module?module.exports=I():"function"==typeof define&&define.amd?define([],I):"object"==typeof exports?exports.openmct=I():g.openmct=I()}(this,(function(){return(()=>{var __webpack_modules__={260:()=>{eval("/*****************************************************************************\n * Open MCT, Copyright (c) 2014-2022, United States Government\n * as represented by the Administrator of the National Aeronautics and Space\n * Administration. All rights reserved.\n *\n * Open MCT is licensed under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * http://www.apache.org/licenses/LICENSE-2.0.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n *\n * Open MCT includes source code licensed under additional open source\n * licenses. See the Open Source Licenses file (LICENSES.md) included with\n * this source code distribution or the Licensing information page available\n * at runtime from the About dialog for additional information.\n *****************************************************************************/\n\n(function () {\n\n    var FIFTEEN_MINUTES = 15 * 60 * 1000;\n\n    var handlers = {\n        subscribe: onSubscribe,\n        unsubscribe: onUnsubscribe,\n        request: onRequest\n    };\n\n    var subscriptions = {};\n\n    function workSubscriptions(timestamp) {\n        var now = Date.now();\n        var nextWork = Math.min.apply(Math, Object.values(subscriptions).map(function (subscription) {\n            return subscription(now);\n        }));\n        var wait = nextWork - now;\n        if (wait < 0) {\n            wait = 0;\n        }\n\n        if (Number.isFinite(wait)) {\n            setTimeout(workSubscriptions, wait);\n        }\n    }\n\n    function onSubscribe(message) {\n        var data = message.data;\n\n        // Keep\n        var start = Date.now();\n        var step = 1000 / data.dataRateInHz;\n        var nextStep = start - (start % step) + step;\n        let work;\n        if (data.spectra) {\n            work = function (now) {\n                while (nextStep < now) {\n                    const messageCopy = Object.create(message);\n                    message.data.start = nextStep - (60 * 1000);\n                    message.data.end = nextStep;\n                    onRequest(messageCopy);\n                    nextStep += step;\n                }\n\n                return nextStep;\n            };\n        } else {\n            work = function (now) {\n                while (nextStep < now) {\n                    self.postMessage({\n                        id: message.id,\n                        data: {\n                            name: data.name,\n                            utc: nextStep,\n                            yesterday: nextStep - 60 * 60 * 24 * 1000,\n                            sin: sin(nextStep, data.period, data.amplitude, data.offset, data.phase, data.randomness),\n                            wavelengths: wavelengths(),\n                            intensities: intensities(),\n                            cos: cos(nextStep, data.period, data.amplitude, data.offset, data.phase, data.randomness)\n                        }\n                    });\n                    nextStep += step;\n                }\n\n                return nextStep;\n            };\n        }\n\n        subscriptions[message.id] = work;\n        workSubscriptions();\n    }\n\n    function onUnsubscribe(message) {\n        delete subscriptions[message.data.id];\n    }\n\n    function onRequest(message) {\n        var request = message.data;\n        if (request.end === undefined) {\n            request.end = Date.now();\n        }\n\n        if (request.start === undefined) {\n            request.start = request.end - FIFTEEN_MINUTES;\n        }\n\n        var now = Date.now();\n        var start = request.start;\n        var end = request.end > now ? now : request.end;\n        var amplitude = request.amplitude;\n        var period = request.period;\n        var offset = request.offset;\n        var dataRateInHz = request.dataRateInHz;\n        var phase = request.phase;\n        var randomness = request.randomness;\n        var loadDelay = Math.max(request.loadDelay, 0);\n\n        var step = 1000 / dataRateInHz;\n        var nextStep = start - (start % step) + step;\n\n        var data = [];\n\n        for (; nextStep < end && data.length < 5000; nextStep += step) {\n            data.push({\n                utc: nextStep,\n                yesterday: nextStep - 60 * 60 * 24 * 1000,\n                sin: sin(nextStep, period, amplitude, offset, phase, randomness),\n                wavelengths: wavelengths(),\n                intensities: intensities(),\n                cos: cos(nextStep, period, amplitude, offset, phase, randomness)\n            });\n        }\n\n        if (loadDelay === 0) {\n            postOnRequest(message, request, data);\n        } else {\n            setTimeout(() => postOnRequest(message, request, data), loadDelay);\n        }\n    }\n\n    function postOnRequest(message, request, data) {\n        self.postMessage({\n            id: message.id,\n            data: request.spectra ? {\n                wavelength: data.map((item) => {\n                    return item.wavelength;\n                }),\n                cos: data.map((item) => {\n                    return item.cos;\n                })\n            } : data\n        });\n    }\n\n    function cos(timestamp, period, amplitude, offset, phase, randomness) {\n        return amplitude\n            * Math.cos(phase + (timestamp / period / 1000 * Math.PI * 2)) + (amplitude * Math.random() * randomness) + offset;\n    }\n\n    function sin(timestamp, period, amplitude, offset, phase, randomness) {\n        return amplitude\n            * Math.sin(phase + (timestamp / period / 1000 * Math.PI * 2)) + (amplitude * Math.random() * randomness) + offset;\n    }\n\n    function wavelengths() {\n        let values = [];\n        while (values.length < 5) {\n            const randomValue = Math.random() * 100;\n            if (!values.includes(randomValue)) {\n                values.push(String(randomValue));\n            }\n        }\n\n        return values;\n    }\n\n    function intensities() {\n        let values = [];\n        while (values.length < 5) {\n            const randomValue = Math.random() * 10;\n            if (!values.includes(randomValue)) {\n                values.push(String(randomValue));\n            }\n        }\n\n        return values;\n    }\n\n    function sendError(error, message) {\n        self.postMessage({\n            error: error.name + ': ' + error.message,\n            message: message,\n            id: message.id\n        });\n    }\n\n    self.onmessage = function handleMessage(event) {\n        var message = event.data;\n        var handler = handlers[message.request];\n\n        if (!handler) {\n            sendError(new Error('unknown message type'), message);\n        } else {\n            try {\n                handler(message);\n            } catch (e) {\n                sendError(e, message);\n            }\n        }\n    };\n\n}());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///260\n")}},__webpack_exports__={};return __webpack_modules__[260](),__webpack_exports__})()}));