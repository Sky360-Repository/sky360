!function(g,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.openmct=n():g.openmct=n()}(this,(function(){return(()=>{var __webpack_modules__={2262:()=>{eval("(function () {\n    const connections = [];\n    let connected = false;\n    let couchEventSource;\n    const controller = new AbortController();\n\n    self.onconnect = function (e) {\n        let port = e.ports[0];\n        connections.push(port);\n\n        port.postMessage({\n            type: 'connection',\n            connectionId: connections.length\n        });\n\n        port.onmessage = function (event) {\n            if (event.data.request === 'close') {\n                console.debug('ðŸšª Closing couch connection ðŸšª');\n                connections.splice(event.data.connectionId - 1, 1);\n                if (connections.length <= 0) {\n                    // abort any outstanding requests if there's nobody listening to it.\n                    controller.abort();\n                }\n\n                connected = false;\n                // stop listening for events\n                couchEventSource.removeEventListener('message', self.onCouchMessage);\n                console.debug('ðŸšª Closed couch connection ðŸšª');\n\n                return;\n            }\n\n            if (event.data.request === 'changes') {\n                if (connected === true) {\n                    return;\n                }\n\n                self.listenForChanges(event.data.url);\n            }\n        };\n\n        port.start();\n    };\n\n    self.onerror = function (error) {\n        self.updateCouchStateIndicator();\n        console.error('ðŸš¨ Error on CouchDB feed ðŸš¨', error);\n    };\n\n    self.onopen = function () {\n        self.updateCouchStateIndicator();\n    };\n\n    self.onCouchMessage = function (event) {\n        self.updateCouchStateIndicator();\n        console.debug('ðŸ“© Received message from CouchDB ðŸ“©');\n\n        const objectChanges = JSON.parse(event.data);\n        connections.forEach(function (connection) {\n            connection.postMessage({\n                objectChanges\n            });\n        });\n    };\n\n    self.listenForChanges = function (url) {\n        console.debug('â‡¿ Opening CouchDB change feed connection â‡¿');\n\n        couchEventSource = new EventSource(url);\n        couchEventSource.onerror = self.onerror;\n        couchEventSource.onopen = self.onopen;\n\n        // start listening for events\n        couchEventSource.addEventListener('message', self.onCouchMessage);\n        connected = true;\n        console.debug('â‡¿ Opened connection â‡¿');\n    };\n\n    self.updateCouchStateIndicator = function () {\n        const { readyState } = couchEventSource;\n        let message = {\n            type: 'state',\n            state: 'pending'\n        };\n        switch (readyState) {\n        case EventSource.CONNECTING:\n            message.state = 'pending';\n            break;\n        case EventSource.OPEN:\n            message.state = 'open';\n            break;\n        case EventSource.CLOSED:\n            message.state = 'close';\n            break;\n        default:\n            message.state = 'unknown';\n            console.error('ðŸš¨ Received unexpected readyState value from CouchDB EventSource feed: ðŸš¨', readyState);\n            break;\n        }\n\n        connections.forEach(function (connection) {\n            connection.postMessage(message);\n        });\n    };\n}());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjI2Mi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZ0JBQWdCLGFBQWE7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVubWN0Ly4vc3JjL3BsdWdpbnMvcGVyc2lzdGVuY2UvY291Y2gvQ291Y2hDaGFuZ2VzRmVlZC5qcz9jZjQ5Il0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgY29ubmVjdGlvbnMgPSBbXTtcbiAgICBsZXQgY29ubmVjdGVkID0gZmFsc2U7XG4gICAgbGV0IGNvdWNoRXZlbnRTb3VyY2U7XG4gICAgY29uc3QgY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcblxuICAgIHNlbGYub25jb25uZWN0ID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgbGV0IHBvcnQgPSBlLnBvcnRzWzBdO1xuICAgICAgICBjb25uZWN0aW9ucy5wdXNoKHBvcnQpO1xuXG4gICAgICAgIHBvcnQucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgdHlwZTogJ2Nvbm5lY3Rpb24nLFxuICAgICAgICAgICAgY29ubmVjdGlvbklkOiBjb25uZWN0aW9ucy5sZW5ndGhcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcG9ydC5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5kYXRhLnJlcXVlc3QgPT09ICdjbG9zZScpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKCfwn5qqIENsb3NpbmcgY291Y2ggY29ubmVjdGlvbiDwn5qqJyk7XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbnMuc3BsaWNlKGV2ZW50LmRhdGEuY29ubmVjdGlvbklkIC0gMSwgMSk7XG4gICAgICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb25zLmxlbmd0aCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGFib3J0IGFueSBvdXRzdGFuZGluZyByZXF1ZXN0cyBpZiB0aGVyZSdzIG5vYm9keSBsaXN0ZW5pbmcgdG8gaXQuXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAvLyBzdG9wIGxpc3RlbmluZyBmb3IgZXZlbnRzXG4gICAgICAgICAgICAgICAgY291Y2hFdmVudFNvdXJjZS5yZW1vdmVFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgc2VsZi5vbkNvdWNoTWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5kZWJ1Zygn8J+aqiBDbG9zZWQgY291Y2ggY29ubmVjdGlvbiDwn5qqJyk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChldmVudC5kYXRhLnJlcXVlc3QgPT09ICdjaGFuZ2VzJykge1xuICAgICAgICAgICAgICAgIGlmIChjb25uZWN0ZWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHNlbGYubGlzdGVuRm9yQ2hhbmdlcyhldmVudC5kYXRhLnVybCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcG9ydC5zdGFydCgpO1xuICAgIH07XG5cbiAgICBzZWxmLm9uZXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgc2VsZi51cGRhdGVDb3VjaFN0YXRlSW5kaWNhdG9yKCk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ/CfmqggRXJyb3Igb24gQ291Y2hEQiBmZWVkIPCfmqgnLCBlcnJvcik7XG4gICAgfTtcblxuICAgIHNlbGYub25vcGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLnVwZGF0ZUNvdWNoU3RhdGVJbmRpY2F0b3IoKTtcbiAgICB9O1xuXG4gICAgc2VsZi5vbkNvdWNoTWVzc2FnZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBzZWxmLnVwZGF0ZUNvdWNoU3RhdGVJbmRpY2F0b3IoKTtcbiAgICAgICAgY29uc29sZS5kZWJ1Zygn8J+TqSBSZWNlaXZlZCBtZXNzYWdlIGZyb20gQ291Y2hEQiDwn5OpJyk7XG5cbiAgICAgICAgY29uc3Qgb2JqZWN0Q2hhbmdlcyA9IEpTT04ucGFyc2UoZXZlbnQuZGF0YSk7XG4gICAgICAgIGNvbm5lY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKGNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24ucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgIG9iamVjdENoYW5nZXNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgc2VsZi5saXN0ZW5Gb3JDaGFuZ2VzID0gZnVuY3Rpb24gKHVybCkge1xuICAgICAgICBjb25zb2xlLmRlYnVnKCfih78gT3BlbmluZyBDb3VjaERCIGNoYW5nZSBmZWVkIGNvbm5lY3Rpb24g4oe/Jyk7XG5cbiAgICAgICAgY291Y2hFdmVudFNvdXJjZSA9IG5ldyBFdmVudFNvdXJjZSh1cmwpO1xuICAgICAgICBjb3VjaEV2ZW50U291cmNlLm9uZXJyb3IgPSBzZWxmLm9uZXJyb3I7XG4gICAgICAgIGNvdWNoRXZlbnRTb3VyY2Uub25vcGVuID0gc2VsZi5vbm9wZW47XG5cbiAgICAgICAgLy8gc3RhcnQgbGlzdGVuaW5nIGZvciBldmVudHNcbiAgICAgICAgY291Y2hFdmVudFNvdXJjZS5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgc2VsZi5vbkNvdWNoTWVzc2FnZSk7XG4gICAgICAgIGNvbm5lY3RlZCA9IHRydWU7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoJ+KHvyBPcGVuZWQgY29ubmVjdGlvbiDih78nKTtcbiAgICB9O1xuXG4gICAgc2VsZi51cGRhdGVDb3VjaFN0YXRlSW5kaWNhdG9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCB7IHJlYWR5U3RhdGUgfSA9IGNvdWNoRXZlbnRTb3VyY2U7XG4gICAgICAgIGxldCBtZXNzYWdlID0ge1xuICAgICAgICAgICAgdHlwZTogJ3N0YXRlJyxcbiAgICAgICAgICAgIHN0YXRlOiAncGVuZGluZydcbiAgICAgICAgfTtcbiAgICAgICAgc3dpdGNoIChyZWFkeVN0YXRlKSB7XG4gICAgICAgIGNhc2UgRXZlbnRTb3VyY2UuQ09OTkVDVElORzpcbiAgICAgICAgICAgIG1lc3NhZ2Uuc3RhdGUgPSAncGVuZGluZyc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBFdmVudFNvdXJjZS5PUEVOOlxuICAgICAgICAgICAgbWVzc2FnZS5zdGF0ZSA9ICdvcGVuJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEV2ZW50U291cmNlLkNMT1NFRDpcbiAgICAgICAgICAgIG1lc3NhZ2Uuc3RhdGUgPSAnY2xvc2UnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBtZXNzYWdlLnN0YXRlID0gJ3Vua25vd24nO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcign8J+aqCBSZWNlaXZlZCB1bmV4cGVjdGVkIHJlYWR5U3RhdGUgdmFsdWUgZnJvbSBDb3VjaERCIEV2ZW50U291cmNlIGZlZWQ6IPCfmqgnLCByZWFkeVN0YXRlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgY29ubmVjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoY29ubmVjdGlvbikge1xuICAgICAgICAgICAgY29ubmVjdGlvbi5wb3N0TWVzc2FnZShtZXNzYWdlKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn0oKSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2262\n")}},__webpack_exports__={};return __webpack_modules__[2262](),__webpack_exports__})()}));